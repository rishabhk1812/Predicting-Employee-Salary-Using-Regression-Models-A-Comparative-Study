a<-5
a
a
2 + 2
2 + (3 * 4)
sqrt(4)             # square root
sqrt(9)             # square root
sqrt(8)             # square root
pi                    # not a function but a constant
pi/3.14                    # not a function but a constant
setwd("D:/1.Ris-Ayu/IIM Kozhikode - Advance Data/zzz Personal Data Analysis/New folder")
install.packages("rpart")
library(readxl)
data1 <- read.csv("Salary Data.csv")
View(data1)
remove.packages("rpart", lib="C:/Program Files/R/R-4.4.1/library")
library(rpart)
?rpart
install.packages("randomForest")
library(randomForest)
str(data1)
data1 <- read.csv("Salary Data.csv")
str(data1)
data1 <- read.csv("Salary Data.csv")
str(data1)
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 100)
View(rf_model)
print(rf_model)
# Predict on the test data
predicted_salaries <- predict(rf_model, newdata = test_data)
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
View(results)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
mse <- mean((results$Actual_Salary - results$Predicted_Salary))
print(paste("Mean Squared Error:", mse))
# Calculate Mean Squared Error (MSE)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education_Level = "Bachelor",
Years_of_Experience = 12
)
predicted_salary <- predict(rf_model, newdata = new_person)
new_person$Gender <- as.factor(new_person$Gender)
new_person$Education_Level <- as.factor(new_person$Education_Level)
str(new_person)
predicted_salary <- predict(rf_model, newdata = new_person)
new_person$Education_Level <- as.factor(new_person$Education)
new_person$Gender <- as.factor(new_person$Gender)
predicted_salary <- predict(rf_model, newdata = new_person)
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
new_person$Gender <- as.factor(new_person$Gender)
new_person$Education <- as.factor(new_person$Education)
predicted_salary <- predict(rf_model, newdata = new_person)
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
# Predict the salary
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
data1 <- read.csv("Salary Data.csv")
data1 <- read.csv("Salary Data.csv")
str(data1)
set.seed(123)  # For reproducibility
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 100)  # Use 100 trees
print(rf_model)
predicted_salaries <- predict(rf_model, newdata = test_data)
print(predicted_salaries)
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
data1 <- read.csv("Salary Data.csv")
str(data1)
# Create training (70%) and testing (30%) datasets
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
# Train the Random Forest model
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 500)  # Use 100 trees
print(rf_model)
predicted_salaries <- predict(rf_model, newdata = test_data)
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
# Calculate Mean Squared Error (MSE)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
# Example: Predict salary for a new individual
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
# Predict the salary
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
data1 <- read.csv("Salary Data.csv")
str(data1)
# Create training (70%) and testing (30%) datasets
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
# Train the Random Forest model
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 1000)  # Use 100 trees
# View the model summary
print(rf_model)
# Predict on the test data
predicted_salaries <- predict(rf_model, newdata = test_data)
# Compare actual vs predicted salaries
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
# Calculate Mean Squared Error (MSE)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
# Example: Predict salary for a new individual
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
# Predict the salary
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
data1 <- read.csv("Salary Data.csv")
str(data1)
# Create training (70%) and testing (30%) datasets
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
# Train the Random Forest model
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 20000)  # Use 100 trees
# View the model summary
print(rf_model)
# Predict on the test data
predicted_salaries <- predict(rf_model, newdata = test_data)
# Compare actual vs predicted salaries
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
# Calculate Mean Squared Error (MSE)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
# Example: Predict salary for a new individual
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
# Predict the salary
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
rmse <- sqrt(mean((results$Actual_Salary - results$Predicted_Salary)^2))
print(paste("Root Mean Squared Error:", rmse))
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
rmse <- sqrt(mean((results$Actual_Salary - results$Predicted_Salary)^2))
print(paste("Root Mean Squared Error:", rmse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
rmse <- sqrt(mean((results$Actual_Salary - results$Predicted_Salary)^2))
print(paste("Root Mean Squared Error:", rmse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
data1 <- read.csv("Salary Data.csv")
str(data1)
# Create training (70%) and testing (30%) datasets
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
# Train the Random Forest model
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 500000)  # Use 100 trees
data1 <- read.csv("Salary Data.csv")
str(data1)
# Create training (70%) and testing (30%) datasets
set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(data1), 0.7 * nrow(data1))  # Randomly sample 70%
train_data <- data1[sample_indices, ]
test_data <- data1[-sample_indices, ]
# Train the Random Forest model
rf_model <- randomForest(Salary ~ Age + Gender + Education + Work_ex,
data = train_data,
ntree = 500)  # Use 100 trees
# View the model summary
print(rf_model)
# Predict on the test data
predicted_salaries <- predict(rf_model, newdata = test_data)
# Compare actual vs predicted salaries
results <- data.frame(
Actual_Salary = test_data$Salary,
Predicted_Salary = predicted_salaries
)
print(results)
# Calculate Mean Squared Error (MSE)
mse <- mean((results$Actual_Salary - results$Predicted_Salary)^2)
print(paste("Mean Squared Error:", mse))
rmse <- sqrt(mean((results$Actual_Salary - results$Predicted_Salary)^2))
print(paste("Root Mean Squared Error:", rmse))
# Calculate R-Squared
ss_total <- sum((test_data$Salary - mean(test_data$Salary))^2)
ss_residual <- sum((test_data$Salary - predicted_salaries)^2)
r_squared <- 1 - (ss_residual / ss_total)
print(paste("R-Squared:", r_squared))
# Example: Predict salary for a new individual
new_person <- data.frame(
Age = 28,
Gender = "Male",
Education = "Bachelor",
Work_ex = 12
)
str(new_person)
# Predict the salary
predicted_salary <- predict(rf_model, newdata = new_person)
print(predicted_salary)
